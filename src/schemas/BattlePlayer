import { type, MapSchema } from "@colyseus/schema"
import { Player } from "./Player"

export class BattlePlayer extends Player {
  // Battle-specific properties
  @type("number") health = 100
  @type("number") maxHealth = 100
  @type("number") kills = 0
  @type("number") deaths = 0
  @type("number") score = 0

  // Status
  @type("boolean") isAlive = true
  @type("boolean") isRespawning = false
  @type("number") respawnTime = 5 // seconds
  @type("number") deathTime = 0

  // Combat timing
  @type("number") lastShotTime = 0
  @type("number") shotCooldown = 250 // milliseconds

  // Abilities
  @type({ map: "number" }) abilityCooldowns = new MapSchema<number>()

  constructor() {
    super()
    this.health = this.maxHealth
    this.isAlive = true
  }

  // Basic combat methods
  takeDamage(amount: number): boolean {
    if (!this.isAlive) return false

    this.health -= amount

    if (this.health <= 0) {
      this.die()
      return true
    }

    this.update()
    return false
  }

  heal(amount: number) {
    if (!this.isAlive) return
    this.health = Math.min(this.maxHealth, this.health + amount)
    this.update()
  }

  die() {
    this.isAlive = false
    this.health = 0
    this.deaths++
    this.deathTime = Date.now()
    this.isRespawning = true
    this.animationState = "dead"
    this.update()
  }

  respawn() {
    this.isAlive = true
    this.health = this.maxHealth
    this.isRespawning = false
    this.animationState = "idle"
    this.update()
  }

  addKill() {
    this.kills++
    this.score += 100
    this.update()
  }

  addScore(points: number) {
    this.score += points
    this.update()
  }

  // Shooting methods
  canShoot(): boolean {
    if (!this.isAlive) return false

    const now = Date.now()
    return now - this.lastShotTime >= this.shotCooldown
  }

  shoot(): boolean {
    if (!this.canShoot()) return false

    this.lastShotTime = Date.now()
    this.update()
    return true
  }

  // Ability methods
  canUseAbility(abilityType: string): boolean {
    if (!this.isAlive) return false

    const now = Date.now()
    const cooldownEndTime = this.abilityCooldowns.get(abilityType) || 0
    return now >= cooldownEndTime
  }

  setAbilityCooldown(abilityType: string, durationMs = 3000) {
    const now = Date.now()
    this.abilityCooldowns.set(abilityType, now + durationMs)
    this.update()
  }

  // Get player stats for leaderboard
  getStats() {
    return {
      name: this.name,
      kills: this.kills,
      deaths: this.deaths,
      score: this.score,
      health: this.health,
      isAlive: this.isAlive,
      kdr: this.deaths > 0 ? this.kills / this.deaths : this.kills,
    }
  }

  // Override toJSON to include battle-specific properties
  toJSON() {
    return {
      ...super.toJSON(),
      health: this.health,
      maxHealth: this.maxHealth,
      kills: this.kills,
      deaths: this.deaths,
      score: this.score,
      isAlive: this.isAlive,
      isRespawning: this.isRespawning,
      respawnTime: this.respawnTime,
      deathTime: this.deathTime,
      lastShotTime: this.lastShotTime,
      shotCooldown: this.shotCooldown,
    }
  }
}
