import { type } from "@colyseus/schema"
import { Player } from "./Player"

export class BattlePlayer extends Player {
  // Battle-specific properties (simplified for room management)
  @type("number") health = 100
  @type("number") maxHealth = 100
  @type("number") kills = 0
  @type("number") deaths = 0
  @type("number") score = 0

  // Status
  @type("boolean") isAlive = true
  @type("boolean") isRespawning = false
  @type("number") respawnTime = 5 // seconds
  @type("number") deathTime = 0

  constructor() {
    super()
    this.health = this.maxHealth
    this.isAlive = true
  }

  // Basic combat methods (simplified)
  takeDamage(amount: number): boolean {
    if (!this.isAlive) return false

    this.health -= amount

    if (this.health <= 0) {
      this.die()
      return true
    }

    return false
  }

  heal(amount: number) {
    if (!this.isAlive) return
    this.health = Math.min(this.maxHealth, this.health + amount)
  }

  die() {
    this.isAlive = false
    this.health = 0
    this.deaths++
    this.deathTime = Date.now()
    this.isRespawning = true
  }

  respawn() {
    this.isAlive = true
    this.health = this.maxHealth
    this.isRespawning = false
  }

  addKill() {
    this.kills++
    this.score += 100
  }

  addScore(points: number) {
    this.score += points
  }

  // Get player stats for leaderboard
  getStats() {
    return {
      name: this.name,
      kills: this.kills,
      deaths: this.deaths,
      score: this.score,
      health: this.health,
      isAlive: this.isAlive,
      kdr: this.deaths > 0 ? this.kills / this.deaths : this.kills,
    }
  }
}
