import { type, MapSchema } from "@colyseus/schema"
import { Player } from "./Player" // Import the base Player schema

export class BattlePlayer extends Player {
  @type("number") health = 100
  @type("number") maxHealth = 100
  @type("boolean") isAlive = true
  @type("number") kills = 0
  @type("number") deaths = 0
  @type("number") score = 0
  @type("number") lastShotTime = 0 // For simple cooldowns
  @type("number") respawnTime = 5 // seconds
  @type("boolean") isRespawning = false
  @type({ map: "number" }) abilityCooldowns = new MapSchema<number>() // Map of abilityId to cooldown end time

  constructor(id?: string, sessionId?: string, name?: string) {
    super(id, sessionId, name)
    this.health = this.maxHealth
    this.isAlive = true
    this.kills = 0
    this.deaths = 0
    this.score = 0
  }

  takeDamage(amount: number) {
    this.health -= amount
    if (this.health <= 0) {
      this.health = 0
      this.isAlive = false
      this.deaths++
      this.isRespawning = true
    }
  }

  heal(amount: number) {
    this.health += amount
    if (this.health > this.maxHealth) {
      this.health = this.maxHealth
    }
  }

  respawn() {
    this.health = this.maxHealth
    this.isAlive = true
    this.isRespawning = false
    // Position will be set by BattleState's respawnPlayer
  }

  addKill() {
    this.kills++
    this.score += 100 // Example score
  }

  canShoot(): boolean {
    // Simple cooldown: 0.5 seconds between shots
    return Date.now() - this.lastShotTime > 500
  }

  canUseAbility(abilityId: string): boolean {
    const cooldownEndTime = this.abilityCooldowns.get(abilityId) || 0
    return Date.now() > cooldownEndTime
  }

  setAbilityCooldown(abilityId: string, durationMs = 3000) {
    this.abilityCooldowns.set(abilityId, Date.now() + durationMs)
  }
}
