import { type } from "@colyseus/schema"
import { Player } from "./Player" // Extend the base Player class

export class BattlePlayer extends Player {
  // Game state (battle-specific)
  @type("number") health = 100
  @type("number") maxHealth = 100
  @type("number") kills = 0
  @type("number") deaths = 0
  @type("number") level = 1
  @type("number") experience = 0
  @type("boolean") isRespawning = false
  @type("number") respawnTime = 3 // seconds

  // Battle room specific properties
  @type("number") score = 0
  @type("boolean") isAlive = true

  // Combat
  @type("number") lastShotTime = 0
  @type({ array: "string" }) abilities = new Array<string>()
  @type({ map: "number" }) abilityCooldowns = new Map<string, number>()
  @type("number") lastAbilityUseTime = 0

  constructor() {
    super() // Call the constructor of the base Player class
    this.health = this.maxHealth
    this.isAlive = true
  }

  canShoot(): boolean {
    const now = Date.now()
    const cooldown = 500 // 0.5 seconds
    return now - this.lastShotTime > cooldown
  }

  canUseAbility(abilityId: string): boolean {
    return !this.abilityCooldowns.has(abilityId) || (this.abilityCooldowns.get(abilityId) || 0) <= 0
  }

  setAbilityCooldown(abilityId: string, cooldown = 5000) {
    this.abilityCooldowns.set(abilityId, Date.now() + cooldown) // Store cooldown end time
    this.lastAbilityUseTime = Date.now()
  }

  updateCooldowns() {
    const now = Date.now()
    this.abilityCooldowns.forEach((cooldownEnd, abilityId) => {
      if (now >= cooldownEnd) {
        this.abilityCooldowns.delete(abilityId)
      }
    })
  }

  takeDamage(damage: number): boolean {
    this.health = Math.max(0, this.health - damage)
    if (this.health <= 0 && this.isAlive) {
      this.isAlive = false
      this.deaths++
      this.isRespawning = true
      return true // Player died
    }
    return false // Player still alive
  }

  heal(amount: number) {
    this.health = Math.min(this.maxHealth, this.health + amount)
  }

  respawn() {
    this.health = this.maxHealth
    this.isAlive = true
    this.isRespawning = false
    this.position.x = 0
    this.position.y = 0
    this.position.z = 0
  }

  addKill() {
    this.kills++
    this.score += 100 // 100 points per kill
    this.experience += 50 // 50 XP per kill
  }

  addScore(points: number) {
    this.score += points
  }
}
